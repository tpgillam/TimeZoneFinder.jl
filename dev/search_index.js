var documenterSearchIndex = {"docs":
[{"location":"#TimeZoneFinder","page":"Home","title":"TimeZoneFinder","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for TimeZoneFinder.","category":"page"},{"location":"#API","page":"Home","title":"API","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [TimeZoneFinder]","category":"page"},{"location":"#TimeZoneFinder._cache_path-Tuple{AbstractString}","page":"Home","title":"TimeZoneFinder._cache_path","text":"Serialized data file path for this version.\n\n\n\n\n\n","category":"method"},{"location":"#TimeZoneFinder._scratch_dir-Tuple{AbstractString}","page":"Home","title":"TimeZoneFinder._scratch_dir","text":"_scratch_dir(release)\n\nGet the scratch directory path in which the serialized mapping data will be kept.\n\n\n\n\n\n","category":"method"},{"location":"#TimeZoneFinder.generate_data-Tuple{AbstractString}","page":"Home","title":"TimeZoneFinder.generate_data","text":"Generate the timezone map data from the artifact identified by release.\n\n\n\n\n\n","category":"method"},{"location":"#TimeZoneFinder.load_data-Tuple{AbstractString}","page":"Home","title":"TimeZoneFinder.load_data","text":"load_data(release)\n\nLoad timezone map data for release.\n\nThis is memoized, such that the data is only read from disk once within the lifetime of the Julia process.\n\n\n\n\n\n","category":"method"},{"location":"#TimeZoneFinder.timezone_at-Tuple{Real, Real}","page":"Home","title":"TimeZoneFinder.timezone_at","text":"timezone_at(latitude, longitude; release=\"2021c\")\n\nGet the timezone at the given latitude and longitude.\n\njulia> timezone_at(52.5061, 13.358)\nEurope/Berlin (UTC+1/UTC+2)\n\nReturns a TimeZone instance if latitude and longitude correspond to a known timezone, otherwise nothing is returned.\n\n\n\n\n\n","category":"method"},{"location":"#Implementation-details","page":"Home","title":"Implementation details","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This module is based upon OpenStreetMap data, which has been compiled into shape files by timezone-boundary-builder. We define an Artifact for each release (since 2021c) of these shape files.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This raw data is provided in JSON format, so the first time a package uses it, it is parsed (which can take tens of seconds). Subsequently, a serialized binary version in a scratch space is loaded, which is much faster. This cache is re-used so long as the package and Julia versions remain the same. After an upgrade the cache will be re-generated, which can cause a one-off latency of a few tens of seconds.","category":"page"},{"location":"#Caveats","page":"Home","title":"Caveats","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The current implementation aims to be simple, however there is scope for further optimisation.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Finding a timezone currently involves a linear scan over a list of about 1000 polygons. For each polygon, which may have tens of thousands of line segments, we perform a containment check for the point. This could be made significantly more performant by adding an appropriate spatial index over the polygons, which would reduce the number of polygons that have to be checked.","category":"page"}]
}
